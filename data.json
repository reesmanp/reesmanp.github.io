{
	"Welcome": {
		"VÃ¤lkommen": {
			"Welcome": "Welcome to my online portfolio! Feel free to browse around my webpage and even send me an email if you have any questions. If you are a possible employer or someone who wants some work done, don't feel shy; please reach out and let me know what you are looking for. Safe travels, friend!",
			"Open Source Projects I Have Contributed To": "<a href=\"https:\/\/github.com\/react-materialize\/react-materialize\" target=\"_blank\">React Materialize (Collaborator Status)<\/a><br \/><a href=\"https:\/\/github.com\/PCGen\/pcgen\" target=\"_blank\">PCGen<\/a>"
		}
	},
	"Bio": {
		"Bio": {
			"Introduction": "My name is Paul Reesman and I have a long and colorful history filled with experience, creativity, curiosity, and leadership. Originally from Phoenix, Arizona I joined the army after high school and became a member of the elite unit known as 'Rangers' up in the state of Washington. Throughout my tenure I advanced to the rank of sergeant and deployed to Afghanistan on four separate occasions. Upon separating from the armed forces, I was left with the same thoughts of nearly any other veteran, 'What next?'",
			"College": "I looked toward college as the next chapter of my life started to unfold. Starting off at Arizona State University, I felt that the school was not a good match for who I was. I then transferred to Oregon State University and continued on my track pursuing a four year degree in computer science. It only took me three years from the end of my enlistment to gain my degree. During my last term, I looked forward to finally joining the industry.",
			"Career": "Immediately after graduating from college, I received an email from Seattle Children's Hospital offering me a position as an application developer up in Seattle. This opportunity provided me to get my foot in the door in the Seattle area. A month or two after moving to Seattle I was also hired on by <a href\"www.codingwithkids.com\" target=\"_blank\">Coding With Kids<\/a> as an instructor. I have been teaching coding to children ever since then.",
			"Special Projects of Note": "I am one of the founders of an app called Lender. Lender is a platform for people to administer nano-loans anonymously. This application is currently under development and the release of Alpha testing is imminent. You can find more at <a href=\"www.wearelender.com\" target=\"_blank\">wearelender.com<\/a>",
			"Interests": "Lastly, I am looking forward to grad school as my interests are broad: Artificial Intelligence, Parallelization/Distributed Computing (Including Cloud and Enterprise computing), and Compiler Design."
		}
	},
	"Portfolio": {
		"Current Projects": {
			"Github": "All of my current projects and most of my completed projects' source code can be found at my github <a href=\"https:\/\/github.com\/reesmanp\" target=\"_blank\">repository<\/a> including the source code for this website <a href=\"https:\/\/github.com\/reesmanp\/reesmanp.github.io\" target=\"_blank\">here<\/a>.",
			"Lender": "I am co-founder and lead backend developer for a new and upcoming app called Lender. The source code lives in a private repo on GitHub, thus I cannot share it with you. To learn more about Lender, visit us at <a href=\"www.wearelender.com\" target=\"_blank\">wearelender.com<\/a> or visit us on <a href=\"https:\/\/www.facebook.com\/wearelender\/\" target=\"_blank\">Facebook<\/a> or even follow us on Twitter at <a href=\"https:\/\/twitter.com\/wearelender\" target=\"_blank\">@WeAreLender<\/a>",
			"BoothTool": "I am currently building a ReactJS program to be used in festival booths to help with front-end transactions and kitchen area accountability. This is being built with TypeScript and will be deployed as a standalone application. My first version of this was with Python using the Tkinter toolkit. Building and maintaining a fitting frontend for the app became overwhelming and I decided a programming language switch was necessary. The old Python code lives in it's own repository for nostalgia's sake.",
			"#": "I am developing my own programming language called #. Since that symbol has several pronunciations (mostly depending on which generation you relate to), it has no standard verbal name. This will be a compiled language that will hopefully be be completely customizable with what I am calling attributes."
		},
		"Completed Projects": {
			"Laser Targeting Device": "I was employed as the 'Senior Computer Science Expert' for a laser targeting device prototype that was being researched at the Oregon State University which was funded by the United States Army. I designed several User Interfaces to help find the most 'intuitive' format based off of rel soldiers feedback. <b>January 2015 - December 2015<\/b>",
			"Splunk App": "For my Senior Design Project, I was assigned into a random group of 4 students and we were randomly assigned a real life project sponsored by an actual company. I was assigned to build a Splunk Application for Elemental Technologies. <b>September 2014 - June 2015<\/b>",
			"MicroGravity": "During my stint at Arizona State University I joined the Microgravity team. We proposed an experiment to NASA where we would study dust coagulation in microgravity to help explain how galaxies are formed. We were one of only a few teams to get selected and be able to conduct our experiment on NASA's microgravity plane. <b>October 2013 - Spring 2014<\/b>"
		}
	},
	"Tools I Use": {
		"Programming Languages": {
			"JavaScript, Node, and React": "I have been using JavaScript as my front end solution for some time now. I have also used it a little bit for backend development using node. React has been my framework of choice for frontend development because I has the most professional experience with it. The way it makes writing HTML and CSS easy and stops full page re-rendering when it isn't needed makes my life so much easier when I am using it.",
			"Python": "Python is by far the quickest language to write in. Whenever I need a solution in a time sensitive environment, python is my go to language. It may not be the fastest language to run but that isn't always needed. I have built standalone one-off projects with python but I usually just develop quick scripts with it.",
			"Cache ObjectScript": "I have a good amount of experience when it comes to InterSystems, Cache, Ensemble, and HealthShare. This language has many features that I dislike about it but at the same time it has so many more that I do like. For instance, objects created (as long as they are persistent) are actually written to the database. In fact, there is no need to even connect to a database since the language is built on top of one. The read and write speeds of the database is phenomenal.",
			"C, C++, and OpenMP": "I have only written academic assignments and personal projects in the c languages. I am currently building a compiler in C since I think the efficiency increase would be worth it as well as learning more about the language would be a plus. I have a love for parallel programming and OpenMP makes my life so much easier by abstracting the creation of threads.",
			"Other languages": "Other languages that I have developed in, either professionally or privately, that I have not recognized are: PHP, Haskell, Bash, Batch, C#, and Java."
		},
		"Atlassian": {
			"Jira": "I have been using Jira for a while now and it is a great tool. Since Atlassian has an entire suite of tools that easily integrate with one another, this tool has helped me throughout the development cycle to help track my issues. When I commit my code through Bitbucket, I can reference the issue I am working on and it will show up whenever I am looking at my issue.",
			"Bitbucket": "I started off using GitHub which was great since it is just Git. However When I switched to Bitbucket, I haven't looked back. The ability to add reviewers to your pull requests and several other features make it more Admin friendly which really helps out when there are new people on the team.",
			"Bamboo": "My deployment tool of choice is Bamboo. This allows for many ways of deploying code including NodeJS and even Bash with SSH and SCP protocols and more. This ies in well with Bitbucket, allowing webhooks to be generated and code builds to happen after certain commits or pull requests."
		},
		"Jetbrains": {
			"WebStorm": "I was developing a lot of JavaScript code including JSX syntax on Notepad++ and I just about had it. After searching around for JavaScript IDE's, I finally came across WebStorm and it has solved all issues I had previously. It integrates seamlessly with Git (or even SVN and Mercurial) and project management is a breeze.",
			"CLion": "I have never been a fan of Visual Studio. It seems very clunky, slow, and I can never get it right. After my success with WebStorm I again looked toward Jetbrains for my IDE platform and found CLion. Since it is identical to WebStorm, I found it very easy to use."
		}
	},
	"Resume": {
	},
	"Blog": {
		"2016": {
			"DevOps": {
				"What It Is": "DevOps (Development and Operations) is a Jack-Of-All-Trades kind of position. Your are expected to develop code for 'X' amount of time and do operations tasks for 'Y' amount of time. The time spent on either side depends on where you work and what is currently prioritized which can change frequently depending on the current Agile SCRUM push. I was moved from a developer position to DevOps during Spring of this year and I thought I would hate it but it turns out that I am loving it. I have been put in charge on a large portion of AWS services, upgrading applications and backing them up, finding out what systems are down and why, and making sure builds are building successfully (Also placing blame on developers if they fail). That is a lot on my plate which caused a lot of unneeded stress since I thought that would take up all of my time.",
				"Why I Love It": "I quickly found out that I had a lot of extra time after my operations tasks were finished. I no longer had the time to build code from the ground up, which is okay with me (And my boss) since I found out that I deliver better quality code faster when I am doing bug fixes and enhancement requests. Heck, I have developed several RESTful API's during my time thus far as DevOps. One more thing is that is forces me to be Full Stack since I have to deal with backend things operationally and most bug fixes and enhancement requests we have are frontend related.",
				"Date Posted": "12/20/2016"
			},
			"Open Source Software": {
				"What?": "Open Source Software (OSS) is the driving force of the software industry when it comes to tools and niche items. There are two main benefits behind the OSS community, it is free and the labor is free. Granted you have to pay attention to the licenses each project may or may not have which may or may not restrict your usage of said project. But mostly it is free. Any one user can come along and use it, change it, and even add to it for you. This helps developers from re-inventing the wheel many times over. GitHub and Bitbucket are my two favorite site hosting OSS repositories.",
				"How?": "This was my question for years on end. Even after I graduated from college, I had no real idea how how to contribute to OSS. There was a class that was offered but I didn't take it because I was already taking 18+ credits a term without it. I only recently found out how to do it and even found a couple repositories that I have contributed to, here is my guide.",
				"The Guide": "Most repositories have constraints on them so not just anybody can push code to it. So best practice would be to fork the project to your own repository and work on that repo. I prefer if each and every feature had it's own branch, so go ahead and make a branch for yourself. Make some changes, add them, and then commit. Be a good boy and add a message. Push your new commit to your own repository. Now if you go back to the original project where you forked from, your branch shows up there. All you have to do is make a pull request from your branch into one of theirs (probably master). The worst they can say is no. They might bring it in without any questions or they might have you make more changes before they accept it.",
				"Issues": "Don't be discouraged, writing code for a project you have no idea how it works is tough. Read through the code, or at least the portion you want to contribute to and take your time so you can thoroughly understand it. If coding is too much, go ahead and make an issue on the project about your specific issue. Please for God's sake be specific and informative. Having issues helps the developers keep track/know about any and all bugs so they can go after them and fix them.",
				"Date Posted": "12/2/2016"
			},
			"Learn a Proper Tool, Not All of Them": {
				"Starting a Project": "At the very beginning of any project, there are a few things that must be done right away before any real work can get done. Setting up Version Control and finding out what actually needs to be built are the two big ones.",
				"My Early Experience": "I have always been pretty good at whiteboarding the project and seeing what the different components really are and how to architect the project. However I haven't always been good at using the right tool for the job. Back in college I was very pro Python, not to say I am not anymore but I have since found that it has a time and place as opposed to all the time. Typically speaking, if you're going to make an application for actual users, then a GUI is going to need to be built. Learning GUI programming is a hard concept to understand and python doesn't make it much easier. I was developing using the Tkinter toolkit which was great but I have since strayed away from that.",
				"Post-Python": "I put one of my incomplete Python projects on the back burner for a bit while I dealt with my new job. After I was settling in I decided to get back at it and to my astonishment, I hated it. We have been using ReactJS at work which (In my personal opinion) is beautiful. Javascript, being made for the front end, really handles all the GUI elements for you and having React on top of it simplifies it for you. So I am in the process of rebuilding the application in JavaScript after ditching the python code.",
				"New Projects": "Recently I have started up yet another project and in the beginning phase I decided I wanted to expand my horizons and build it with something new to hopefully make me more hireable. I decided on Vue2.0 because, why not? I even looked at Angular2.0. I went even further and tried developing in Pug (Formerly known as Jade). Then a thought occurred to me while reading <a href\"https:\/\/hackernoon.com\/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.5i5dy52d8\">this article<\/a>, 'If the tools I know can solve this problem and do it well, why do I need to learn something else that can do the same exact thing?'",
				"Lessons Learned": "At the end of the day it doesn't mater if you're using a framework that was popular a year or two ago and is dead now. It doesn't matter if you're using the latest and greatest framework either. If what you're using can solve the problem, solve it well (by your standards), and make the application maintainable then go ahead and use it. If you're just learning and want to make your very first application, sure go ahead and use the latest and greatest since you'll have to learn something new anyways. If it isn't broke, don't fix it.",
				"Date Posted": "11/3/2016"
			},
			"Git and Messing Up": {
				"Real Quick": "This is my first blog entry and I will hopefully be posting here regularly with potentially relevant topics around what I have experienced while performing my job. Today's topic is about Git and how even when you mess up, you can still save your (and your co-workers') behind.",
				"Not So Bad": "There have been two incidents of late, both dealing with Git, that I have learned from. I will start off with the most recent of the two as it was less bad than the other. Someone, let's call him Walker, accidentally deleted a few files from the Git repo. He did this on a Friday and he didn't tell anyone that he did this. Granted he made a pull request with these changes and had <b>three<\/b> of us review it. Not one of us caught these deleted files and we approved the merge. Come next week I am trying to build our environment and Yarn is yelling at me because the package.json file doesn't exist anymore. Big ol' red flag. I do the right thing and double check the repo and even find the exact commit where he deleted the file. I then tell him to fix it. All is well now but things could have been worse. The next scenario is worse by far.",
				"So Very Bad": "Again on a Friday (I think I have learnt my lesson) a while back, my boss and I were adding some files that needed to be in the repo ASAP. we were creating hotfix branches and making pull requests from these hotfix branches into both Develop and Master. We had about five of these for each branch so about 10 branches were made. Being the good, responsible people we are, we made sure that the Develop branch could only be changed through pull requests, not directly modified (Thank you Bitbucket). So we are making pull requests and having the other review it. Bang, bang, bang. We knock them all out. The next Monday I have to do something with Master (Honestly, I don't even remember what) and.... I can't find it. I look for about 20 minutes and <b>Master does not exist<\/b>. Needless to say, I begin to freak out.",
				"Git Saves the Day": "I was able to locate what had happened: My boss, during the last pull request, forgot to make a new branch. He instead made changes directly to master and made a pull request to develop. Since all of our hotfix branches were one-off things, I had checked a box that said <b>delete after merge<\/b> and it persists until it is unchecked. So without noticing that I am merging master into develop, I merged them <b>and I deleted the master branch<\/b>. Luckily we have a tool called Google that helped me find the ability to perform necromancy and bring the master branch back from the dead. I have saved the day because of Git.",
				"Lessons Learned": "Always actually review the code you are reviewing and pay special close attention to which branch is being merged into what. Also, pay attention to when you are deleting branches; Ask yourself, 'should I really delete this branch?' Lastly, double check that you have permissions up that say Develop <b>and<\/b> Master branches can only be changed through pull requests and that neither can be deleted.",
				"Date Posted": "10/21/2016"
			}
		},
		"2017": {
			"Testing is a Thing": {
				"Everyone is Accountable": "I am currently developing a RESTful interface at work using HapiJS and this interface is only a small (but important) piece of the whole project. Each and every person on the team has their own part they are building and the project is moving along well. Since we are all solely responsible for our parts, we want the code quality to be as good as possible; each part has become, in a sense, our babies. Now I will boldly say that if any person on the team isn't testing their portion individually, they aren't doing their job.",
				"Batch Testing Helps Find Corner Cases": "Now since we are all testing our own interfaces, we have no idea if they play nice with each others. We can message each other over HipChat or go to a whiteboard and draw things out, but until we actually send messages to each other we will never know if it works. Sure, I can send myself HTTP requests to test, but I won't be able to fully send myself all things another portion of the architecture is supposed to send. The last couple of days have been testing, and thank goodness we have done batch testing. The first couple messages returned 400 and 500 errors and I was able to fix those easily. We re-tested those few and 200's were returned and all was good. Instead of calling it good, we decided to send nearly 1000 more messages through. That is when things really broke.",
				"Regression, Integration, and Click Testing": "After the batch testing and the fixes that came along with it, it was now time to add more features. After the features were added, then more testing and so on. The batch testing was a form of integration testing, so we are good on that count. But how do we know if my new features don't break the fixes for old bugs? Keep sending the old messages through. Make sure that the messages that worked previously still work and then send in the new messages to test the new features. Now nothing is getting through your cold developing hands. But how do you know the data the passed through was valid? Our team is using old fashioned click testing. Nothing fancy but if it looks right on the UI, it has gone right.",
				"Lessons Learned": "You may send some messages through and they might break things. Go ahead and fix them, but don't stop there. Send more messages through and fix the things that break. Don't forget to keep testing the old and the new. Keep going until all corner cases have been found. It is part of your job, not someone else's.",
				"Date Posted": "1/5/2017"
			}
		}
	},
	"Contact Me": {
		"Email": "<a href=\"mailto:Paul.R.Reesman@gmail.com\">Paul.R.Reesman@gmail.com<\/a>"
	}
}